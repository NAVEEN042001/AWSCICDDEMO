import { Component, Renderer2, Input, ViewChild, NgModule } from '@angular/core';

import * as ɵngcc0 from '@angular/core';

var _c0 = ["bcElement"];
var /** @type {?} */ jsbarcode = require('jsbarcode');
var NgxBarcodeComponent = /** @class */ (function () {
    /**
     * @param {?} renderer
     */
    function NgxBarcodeComponent(renderer) {
        this.renderer = renderer;
        this.elementType = 'svg';
        this.cssClass = 'barcode'; // this should be done more elegantly
        this.format = 'CODE128';
        this.lineColor = '#000000';
        this.width = 2;
        this.height = 100;
        this.displayValue = false;
        this.fontOptions = '';
        this.font = 'monospace';
        this.textAlign = 'center';
        this.textPosition = 'bottom';
        this.textMargin = 2;
        this.fontSize = 20;
        this.background = '#ffffff';
        this.margin = 10;
        this.marginTop = 10;
        this.marginBottom = 10;
        this.marginLeft = 10;
        this.marginRight = 10;
        this.value = '';
        this.valid = function () { return true; };
    }
    Object.defineProperty(NgxBarcodeComponent.prototype, "options", {
        /**
         * @return {?}
         */
        get: function () {
            return {
                format: this.format,
                lineColor: this.lineColor,
                width: this.width,
                height: this.height,
                displayValue: this.displayValue,
                fontOptions: this.fontOptions,
                font: this.font,
                textAlign: this.textAlign,
                textPosition: this.textPosition,
                textMargin: this.textMargin,
                fontSize: this.fontSize,
                background: this.background,
                margin: this.margin,
                marginTop: this.marginTop,
                marginBottom: this.marginBottom,
                marginLeft: this.marginLeft,
                marginRight: this.marginRight,
                valid: this.valid,
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgxBarcodeComponent.prototype.ngOnChanges = function () {
        this.createBarcode();
    };
    /**
     * @return {?}
     */
    NgxBarcodeComponent.prototype.createBarcode = function () {
        if (!this.value) {
            return;
        }
        var /** @type {?} */ element;
        switch (this.elementType) {
            case 'img':
                element = this.renderer.createElement('img');
                break;
            case 'canvas':
                element = this.renderer.createElement('canvas');
                break;
            case 'svg':
            default:
                element = this.renderer.createElement('svg', 'svg');
        }
        jsbarcode(element, this.value, this.options);
        for (var _i = 0, _a = this.bcElement.nativeElement.childNodes; _i < _a.length; _i++) {
            var node = _a[_i];
            this.renderer.removeChild(this.bcElement.nativeElement, node);
        }
        this.renderer.appendChild(this.bcElement.nativeElement, element);
    };
    /**
     * @nocollapse
     */
    NgxBarcodeComponent.ctorParameters = function () { return [
        { type: Renderer2, },
    ]; };
    NgxBarcodeComponent.propDecorators = {
        'elementType': [{ type: Input, args: ['bc-element-type',] },],
        'cssClass': [{ type: Input, args: ['bc-class',] },],
        'format': [{ type: Input, args: ['bc-format',] },],
        'lineColor': [{ type: Input, args: ['bc-line-color',] },],
        'width': [{ type: Input, args: ['bc-width',] },],
        'height': [{ type: Input, args: ['bc-height',] },],
        'displayValue': [{ type: Input, args: ['bc-display-value',] },],
        'fontOptions': [{ type: Input, args: ['bc-font-options',] },],
        'font': [{ type: Input, args: ['bc-font',] },],
        'textAlign': [{ type: Input, args: ['bc-text-align',] },],
        'textPosition': [{ type: Input, args: ['bc-text-position',] },],
        'textMargin': [{ type: Input, args: ['bc-text-margin',] },],
        'fontSize': [{ type: Input, args: ['bc-font-size',] },],
        'background': [{ type: Input, args: ['bc-background',] },],
        'margin': [{ type: Input, args: ['bc-margin',] },],
        'marginTop': [{ type: Input, args: ['bc-margin-top',] },],
        'marginBottom': [{ type: Input, args: ['bc-margin-bottom',] },],
        'marginLeft': [{ type: Input, args: ['bc-margin-left',] },],
        'marginRight': [{ type: Input, args: ['bc-margin-right',] },],
        'value': [{ type: Input, args: ['bc-value',] },],
        'bcElement': [{ type: ViewChild, args: ['bcElement', /** @type {?} */ ({ static: true }),] },],
        'valid': [{ type: Input, args: ['bc-valid',] },],
    };
NgxBarcodeComponent.ɵfac = function NgxBarcodeComponent_Factory(t) { return new (t || NgxBarcodeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
NgxBarcodeComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NgxBarcodeComponent, selectors: [["ngx-barcode"]], viewQuery: function NgxBarcodeComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 7);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.bcElement = _t.first);
    } }, inputs: { elementType: ["bc-element-type", "elementType"], cssClass: ["bc-class", "cssClass"], format: ["bc-format", "format"], lineColor: ["bc-line-color", "lineColor"], width: ["bc-width", "width"], height: ["bc-height", "height"], displayValue: ["bc-display-value", "displayValue"], fontOptions: ["bc-font-options", "fontOptions"], font: ["bc-font", "font"], textAlign: ["bc-text-align", "textAlign"], textPosition: ["bc-text-position", "textPosition"], textMargin: ["bc-text-margin", "textMargin"], fontSize: ["bc-font-size", "fontSize"], background: ["bc-background", "background"], margin: ["bc-margin", "margin"], marginTop: ["bc-margin-top", "marginTop"], marginBottom: ["bc-margin-bottom", "marginBottom"], marginLeft: ["bc-margin-left", "marginLeft"], marginRight: ["bc-margin-right", "marginRight"], value: ["bc-value", "value"], valid: ["bc-valid", "valid"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 2, consts: [["bcElement", ""]], template: function NgxBarcodeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", null, 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.cssClass);
    } }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxBarcodeComponent, [{
        type: Component,
        args: [{ selector: 'ngx-barcode', template: "<div #bcElement [class]=\"cssClass\"></div>" }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }]; }, { elementType: [{
            type: Input,
            args: ['bc-element-type']
        }], cssClass: [{
            type: Input,
            args: ['bc-class']
        }], format: [{
            type: Input,
            args: ['bc-format']
        }], lineColor: [{
            type: Input,
            args: ['bc-line-color']
        }], width: [{
            type: Input,
            args: ['bc-width']
        }], height: [{
            type: Input,
            args: ['bc-height']
        }], displayValue: [{
            type: Input,
            args: ['bc-display-value']
        }], fontOptions: [{
            type: Input,
            args: ['bc-font-options']
        }], font: [{
            type: Input,
            args: ['bc-font']
        }], textAlign: [{
            type: Input,
            args: ['bc-text-align']
        }], textPosition: [{
            type: Input,
            args: ['bc-text-position']
        }], textMargin: [{
            type: Input,
            args: ['bc-text-margin']
        }], fontSize: [{
            type: Input,
            args: ['bc-font-size']
        }], background: [{
            type: Input,
            args: ['bc-background']
        }], margin: [{
            type: Input,
            args: ['bc-margin']
        }], marginTop: [{
            type: Input,
            args: ['bc-margin-top']
        }], marginBottom: [{
            type: Input,
            args: ['bc-margin-bottom']
        }], marginLeft: [{
            type: Input,
            args: ['bc-margin-left']
        }], marginRight: [{
            type: Input,
            args: ['bc-margin-right']
        }], value: [{
            type: Input,
            args: ['bc-value']
        }], valid: [{
            type: Input,
            args: ['bc-valid']
        }], bcElement: [{
            type: ViewChild,
            args: ['bcElement', /** @type {?} */ ({ static: true })]
        }] }); })();
    return NgxBarcodeComponent;
}());

var NgxBarcodeModule = /** @class */ (function () {
    function NgxBarcodeModule() {
    }
    /**
     * @return {?}
     */
    NgxBarcodeModule.forRoot = function () {
        return {
            ngModule: NgxBarcodeModule,
            providers: []
        };
    };
    /**
     * @nocollapse
     */
    NgxBarcodeModule.ctorParameters = function () { return []; };
NgxBarcodeModule.ɵfac = function NgxBarcodeModule_Factory(t) { return new (t || NgxBarcodeModule)(); };
NgxBarcodeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgxBarcodeModule });
NgxBarcodeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxBarcodeModule, [{
        type: NgModule,
        args: [{
                imports: [],
                declarations: [
                    NgxBarcodeComponent,
                ],
                exports: [
                    NgxBarcodeComponent,
                ]
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxBarcodeModule, { declarations: [NgxBarcodeComponent], exports: [NgxBarcodeComponent] }); })();
    return NgxBarcodeModule;
}());

export { NgxBarcodeModule, NgxBarcodeComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,